# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_task_constructor_msgs/ExecuteTaskSolutionActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import moveit_task_constructor_msgs.msg
import visualization_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import octomap_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class ExecuteTaskSolutionActionGoal(genpy.Message):
  _md5sum = "993b3dc401fc019ee24a3da16f0e364f"
  _type = "moveit_task_constructor_msgs/ExecuteTaskSolutionActionGoal"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
ExecuteTaskSolutionGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: moveit_task_constructor_msgs/ExecuteTaskSolutionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Task solution to execute
Solution solution


================================================================================
MSG: moveit_task_constructor_msgs/Solution
# id of generating process
string process_id

# id of associated task
string task_id

# planning scene of start state
moveit_msgs/PlanningScene start_scene

# set of all sub solutions involved
SubSolution[] sub_solution

# (ordered) sequence of actual trajectories
SubTrajectory[] sub_trajectory

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have 
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the specified header

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have 
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list 
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

================================================================================
MSG: moveit_task_constructor_msgs/SubSolution
# generic solution information
SolutionInfo info

# IDs of subsolutions
uint32[] sub_solution_id

================================================================================
MSG: moveit_task_constructor_msgs/SolutionInfo
# unique id within task
uint32 id

# associated cost
float32 cost

# associated comment, usually providing failure hint
string comment

# id of stage that created this trajectory
uint32 stage_id

# markers, e.g. providing additional hints or illustrating failure
visualization_msgs/Marker[] markers

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: moveit_task_constructor_msgs/SubTrajectory
# generic solution information
SolutionInfo info

# trajectory
moveit_msgs/RobotTrajectory trajectory

# planning scene of end state as diff w.r.t. start state
moveit_msgs/PlanningScene scene_diff

================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start
"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','moveit_task_constructor_msgs/ExecuteTaskSolutionGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExecuteTaskSolutionActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_task_constructor_msgs.msg.ExecuteTaskSolutionGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = moveit_task_constructor_msgs.msg.ExecuteTaskSolutionGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.process_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.start_scene.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.robot_state.joint_state.header.seq, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.solution.start_scene.robot_state.joint_state.position))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.solution.start_scene.robot_state.joint_state.velocity))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.solution.start_scene.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.goal.solution.start_scene.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        buff.write(_get_struct_I().pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v10 = _v7.type
        _x = _v10.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v10.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v11 = val3.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val3.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v13 = val3.position
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.orientation
          _x = _v14
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v15 = val3.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v17 = val3.position
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v18 = val3.orientation
          _x = _v18
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v7.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v19 = val1.detach_posture
        _v20 = _v19.header
        buff.write(_get_struct_I().pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v19.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v22 = val3.time_from_start
          _x = _v22
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.robot_state.is_diff))
      _x = self.goal.solution.start_scene.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.fixed_frame_transforms:
        _v23 = val1.header
        buff.write(_get_struct_I().pack(_v23.seq))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v25 = val1.transform
        _v26 = _v25.translation
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = _v25.rotation
        _x = _v27
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.enabled))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values))
      length = len(self.goal.solution.start_scene.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.goal.solution.start_scene.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.goal.solution.start_scene.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v28 = val1.color
        _x = _v28
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.goal.solution.start_scene.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.world.collision_objects:
        _v29 = val1.header
        buff.write(_get_struct_I().pack(_v29.seq))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v31 = val1.type
        _x = _v31.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v31.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v32 = val2.position
          _x = _v32
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v33 = val2.orientation
          _x = _v33
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v34 = val2.position
          _x = _v34
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v35 = val2.orientation
          _x = _v35
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v36 = val2.position
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v37 = val2.orientation
          _x = _v37
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v38 = val2.position
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v39 = val2.orientation
          _x = _v39
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.world.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.goal.solution.start_scene.world.octomap.origin.position.x, _x.goal.solution.start_scene.world.octomap.origin.position.y, _x.goal.solution.start_scene.world.octomap.origin.position.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.x, _x.goal.solution.start_scene.world.octomap.origin.orientation.y, _x.goal.solution.start_scene.world.octomap.origin.orientation.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.w, _x.goal.solution.start_scene.world.octomap.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.world.octomap.octomap.binary))
      _x = self.goal.solution.start_scene.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.goal.solution.start_scene.world.octomap.octomap.resolution))
      length = len(self.goal.solution.start_scene.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.goal.solution.start_scene.world.octomap.octomap.data))
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.is_diff))
      length = len(self.goal.solution.sub_solution)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.sub_solution:
        _v40 = val1.info
        _x = _v40
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v40.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(_v40.stage_id))
        length = len(_v40.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v40.markers:
          _v41 = val3.header
          buff.write(_get_struct_I().pack(_v41.seq))
          _v42 = _v41.stamp
          _x = _v42
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v41.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v43 = val3.pose
          _v44 = _v43.position
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = _v43.orientation
          _x = _v45
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v46 = val3.scale
          _x = _v46
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v47 = val3.color
          _x = _v47
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v48 = val3.lifetime
          _x = _v48
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_B().pack(val3.frame_locked))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_B().pack(val3.mesh_use_embedded_materials))
        length = len(val1.sub_solution_id)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.sub_solution_id))
      length = len(self.goal.solution.sub_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.sub_trajectory:
        _v49 = val1.info
        _x = _v49
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v49.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(_v49.stage_id))
        length = len(_v49.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.markers:
          _v50 = val3.header
          buff.write(_get_struct_I().pack(_v50.seq))
          _v51 = _v50.stamp
          _x = _v51
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v50.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v52 = val3.pose
          _v53 = _v52.position
          _x = _v53
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v54 = _v52.orientation
          _x = _v54
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v55 = val3.scale
          _x = _v55
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v56 = val3.color
          _x = _v56
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v57 = val3.lifetime
          _x = _v57
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_B().pack(val3.frame_locked))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_B().pack(val3.mesh_use_embedded_materials))
        _v58 = val1.trajectory
        _v59 = _v58.joint_trajectory
        _v60 = _v59.header
        buff.write(_get_struct_I().pack(_v60.seq))
        _v61 = _v60.stamp
        _x = _v61
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v60.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v59.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v59.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v59.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v59.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.positions))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.velocities))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.accelerations))
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.effort))
          _v62 = val4.time_from_start
          _x = _v62
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v63 = _v58.multi_dof_joint_trajectory
        _v64 = _v63.header
        buff.write(_get_struct_I().pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v63.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v63.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v63.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v63.points:
          length = len(val4.transforms)
          buff.write(_struct_I.pack(length))
          for val5 in val4.transforms:
            _v66 = val5.translation
            _x = _v66
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v67 = val5.rotation
            _x = _v67
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          for val5 in val4.velocities:
            _v68 = val5.linear
            _x = _v68
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v69 = val5.angular
            _x = _v69
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          for val5 in val4.accelerations:
            _v70 = val5.linear
            _x = _v70
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v71 = val5.angular
            _x = _v71
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v72 = val4.time_from_start
          _x = _v72
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v73 = val1.scene_diff
        _x = _v73.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v74 = _v73.robot_state
        _v75 = _v74.joint_state
        _v76 = _v75.header
        buff.write(_get_struct_I().pack(_v76.seq))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v75.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v75.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.pack('<I%ss'%length, length, val5))
        length = len(_v75.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v75.position))
        length = len(_v75.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v75.velocity))
        length = len(_v75.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v75.effort))
        _v78 = _v74.multi_dof_joint_state
        _v79 = _v78.header
        buff.write(_get_struct_I().pack(_v79.seq))
        _v80 = _v79.stamp
        _x = _v80
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v79.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v78.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v78.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.pack('<I%ss'%length, length, val5))
        length = len(_v78.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v78.transforms:
          _v81 = val5.translation
          _x = _v81
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v82 = val5.rotation
          _x = _v82
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v78.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v78.twist:
          _v83 = val5.linear
          _x = _v83
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v84 = val5.angular
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v78.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v78.wrench:
          _v85 = val5.force
          _x = _v85
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v86 = val5.torque
          _x = _v86
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v74.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v74.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v87 = val4.object
          _v88 = _v87.header
          buff.write(_get_struct_I().pack(_v88.seq))
          _v89 = _v88.stamp
          _x = _v89
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v88.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v87.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v90 = _v87.type
          _x = _v90.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v90.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v87.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.primitives:
            buff.write(_get_struct_B().pack(val6.type))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val6.dimensions))
          length = len(_v87.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.primitive_poses:
            _v91 = val6.position
            _x = _v91
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v92 = val6.orientation
            _x = _v92
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v87.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v87.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.mesh_poses:
            _v93 = val6.position
            _x = _v93
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v94 = val6.orientation
            _x = _v94
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v87.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.planes:
            buff.write(_get_struct_4d().pack(*val6.coef))
          length = len(_v87.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.plane_poses:
            _v95 = val6.position
            _x = _v95
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v96 = val6.orientation
            _x = _v96
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v87.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.pack('<I%ss'%length, length, val6))
          length = len(_v87.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v87.subframe_poses:
            _v97 = val6.position
            _x = _v97
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v98 = val6.orientation
            _x = _v98
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_b().pack(_v87.operation))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.pack('<I%ss'%length, length, val5))
          _v99 = val4.detach_posture
          _v100 = _v99.header
          buff.write(_get_struct_I().pack(_v100.seq))
          _v101 = _v100.stamp
          _x = _v101
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v100.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v99.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v99.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.pack('<I%ss'%length, length, val6))
          length = len(_v99.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v99.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val6.positions))
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val6.velocities))
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val6.accelerations))
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val6.effort))
            _v102 = val6.time_from_start
            _x = _v102
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_d().pack(val4.weight))
        buff.write(_get_struct_B().pack(_v74.is_diff))
        _x = _v73.robot_model_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v73.fixed_frame_transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.fixed_frame_transforms:
          _v103 = val3.header
          buff.write(_get_struct_I().pack(_v103.seq))
          _v104 = _v103.stamp
          _x = _v104
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v103.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v105 = val3.transform
          _v106 = _v105.translation
          _x = _v106
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v107 = _v105.rotation
          _x = _v107
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v108 = _v73.allowed_collision_matrix
        length = len(_v108.entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v108.entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v108.entry_values)
        buff.write(_struct_I.pack(length))
        for val4 in _v108.entry_values:
          length = len(val4.enabled)
          buff.write(_struct_I.pack(length))
          pattern = '<%sB'%length
          buff.write(struct.pack(pattern, *val4.enabled))
        length = len(_v108.default_entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v108.default_entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v108.default_entry_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *_v108.default_entry_values))
        length = len(_v73.link_padding)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.link_padding:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val3.padding))
        length = len(_v73.link_scale)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.link_scale:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val3.scale))
        length = len(_v73.object_colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.object_colors:
          _x = val3.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v109 = val3.color
          _x = _v109
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v110 = _v73.world
        length = len(_v110.collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v110.collision_objects:
          _v111 = val4.header
          buff.write(_get_struct_I().pack(_v111.seq))
          _v112 = _v111.stamp
          _x = _v112
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v111.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v113 = val4.type
          _x = _v113.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v113.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val4.primitives)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitives:
            buff.write(_get_struct_B().pack(val5.type))
            length = len(val5.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val5.dimensions))
          length = len(val4.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitive_poses:
            _v114 = val5.position
            _x = _v114
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v115 = val5.orientation
            _x = _v115
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.meshes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.meshes:
            length = len(val5.triangles)
            buff.write(_struct_I.pack(length))
            for val6 in val5.triangles:
              buff.write(_get_struct_3I().pack(*val6.vertex_indices))
            length = len(val5.vertices)
            buff.write(_struct_I.pack(length))
            for val6 in val5.vertices:
              _x = val6
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.mesh_poses:
            _v116 = val5.position
            _x = _v116
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v117 = val5.orientation
            _x = _v117
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.planes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.planes:
            buff.write(_get_struct_4d().pack(*val5.coef))
          length = len(val4.plane_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.plane_poses:
            _v118 = val5.position
            _x = _v118
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v119 = val5.orientation
            _x = _v119
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.subframe_names)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_names:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.pack('<I%ss'%length, length, val5))
          length = len(val4.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_poses:
            _v120 = val5.position
            _x = _v120
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v121 = val5.orientation
            _x = _v121
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_b().pack(val4.operation))
        _v122 = _v110.octomap
        _v123 = _v122.header
        buff.write(_get_struct_I().pack(_v123.seq))
        _v124 = _v123.stamp
        _x = _v124
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v123.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v125 = _v122.origin
        _v126 = _v125.position
        _x = _v126
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v127 = _v125.orientation
        _x = _v127
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v128 = _v122.octomap
        _v129 = _v128.header
        buff.write(_get_struct_I().pack(_v129.seq))
        _v130 = _v129.stamp
        _x = _v130
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v129.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v128.binary))
        _x = _v128.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(_v128.resolution))
        length = len(_v128.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(struct.pack(pattern, *_v128.data))
        buff.write(_get_struct_B().pack(_v73.is_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_task_constructor_msgs.msg.ExecuteTaskSolutionGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.process_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.process_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.task_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.name = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.robot_state.joint_state.header.seq, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v131 = val1.translation
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v132 = val1.rotation
        _x = _v132
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v133 = val1.linear
        _x = _v133
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v134 = val1.angular
        _x = _v134
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v135 = val1.force
        _x = _v135
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v136 = val1.torque
        _x = _v136
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v137 = val1.object
        _v138 = _v137.header
        start = end
        end += 4
        (_v138.seq,) = _get_struct_I().unpack(str[start:end])
        _v139 = _v138.stamp
        _x = _v139
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v138.frame_id = str[start:end].decode('utf-8')
        else:
          _v138.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v137.id = str[start:end].decode('utf-8')
        else:
          _v137.id = str[start:end]
        _v140 = _v137.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v140.key = str[start:end].decode('utf-8')
        else:
          _v140.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v140.db = str[start:end].decode('utf-8')
        else:
          _v140.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v137.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v141 = val3.position
          _x = _v141
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v142 = val3.orientation
          _x = _v142
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v137.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v137.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v143 = val3.position
          _x = _v143
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v144 = val3.orientation
          _x = _v144
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v137.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v137.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v145 = val3.position
          _x = _v145
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v146 = val3.orientation
          _x = _v146
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v137.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v137.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v147 = val3.position
          _x = _v147
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v148 = val3.orientation
          _x = _v148
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v137.subframe_poses.append(val3)
        start = end
        end += 1
        (_v137.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v149 = val1.detach_posture
        _v150 = _v149.header
        start = end
        end += 4
        (_v150.seq,) = _get_struct_I().unpack(str[start:end])
        _v151 = _v150.stamp
        _x = _v151
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v150.frame_id = str[start:end].decode('utf-8')
        else:
          _v150.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v149.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v149.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v149.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v152 = val3.time_from_start
          _x = _v152
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v149.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.goal.solution.start_scene.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.is_diff = bool(self.goal.solution.start_scene.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v153 = val1.header
        start = end
        end += 4
        (_v153.seq,) = _get_struct_I().unpack(str[start:end])
        _v154 = _v153.stamp
        _x = _v154
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v153.frame_id = str[start:end].decode('utf-8')
        else:
          _v153.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v155 = val1.transform
        _v156 = _v155.translation
        _x = _v156
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v157 = _v155.rotation
        _x = _v157
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.goal.solution.start_scene.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = struct.unpack(pattern, str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.goal.solution.start_scene.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values = struct.unpack(pattern, str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values = list(map(bool, self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v158 = val1.color
        _x = _v158
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.goal.solution.start_scene.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v159 = val1.header
        start = end
        end += 4
        (_v159.seq,) = _get_struct_I().unpack(str[start:end])
        _v160 = _v159.stamp
        _x = _v160
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v159.frame_id = str[start:end].decode('utf-8')
        else:
          _v159.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v161 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v161.key = str[start:end].decode('utf-8')
        else:
          _v161.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v161.db = str[start:end].decode('utf-8')
        else:
          _v161.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v162 = val2.position
          _x = _v162
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v163 = val2.orientation
          _x = _v163
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v164 = val2.position
          _x = _v164
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v165 = val2.orientation
          _x = _v165
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v166 = val2.position
          _x = _v166
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v167 = val2.orientation
          _x = _v167
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v168 = val2.position
          _x = _v168
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v169 = val2.orientation
          _x = _v169
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.goal.solution.start_scene.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.world.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.solution.start_scene.world.octomap.origin.position.x, _x.goal.solution.start_scene.world.octomap.origin.position.y, _x.goal.solution.start_scene.world.octomap.origin.position.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.x, _x.goal.solution.start_scene.world.octomap.origin.orientation.y, _x.goal.solution.start_scene.world.octomap.origin.orientation.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.w, _x.goal.solution.start_scene.world.octomap.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.goal.solution.start_scene.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.world.octomap.octomap.binary = bool(self.goal.solution.start_scene.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.goal.solution.start_scene.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.world.octomap.octomap.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.goal.solution.start_scene.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.is_diff = bool(self.goal.solution.start_scene.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.sub_solution = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubSolution()
        _v170 = val1.info
        _x = _v170
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v170.comment = str[start:end].decode('utf-8')
        else:
          _v170.comment = str[start:end]
        start = end
        end += 4
        (_v170.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v170.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v171 = val3.header
          start = end
          end += 4
          (_v171.seq,) = _get_struct_I().unpack(str[start:end])
          _v172 = _v171.stamp
          _x = _v172
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v171.frame_id = str[start:end].decode('utf-8')
          else:
            _v171.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v173 = val3.pose
          _v174 = _v173.position
          _x = _v174
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v175 = _v173.orientation
          _x = _v175
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v176 = val3.scale
          _x = _v176
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v177 = val3.color
          _x = _v177
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v178 = val3.lifetime
          _x = _v178
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v170.markers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.sub_solution_id = struct.unpack(pattern, str[start:end])
        self.goal.solution.sub_solution.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.sub_trajectory = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubTrajectory()
        _v179 = val1.info
        _x = _v179
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v179.comment = str[start:end].decode('utf-8')
        else:
          _v179.comment = str[start:end]
        start = end
        end += 4
        (_v179.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v179.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v180 = val3.header
          start = end
          end += 4
          (_v180.seq,) = _get_struct_I().unpack(str[start:end])
          _v181 = _v180.stamp
          _x = _v181
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v180.frame_id = str[start:end].decode('utf-8')
          else:
            _v180.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v182 = val3.pose
          _v183 = _v182.position
          _x = _v183
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v184 = _v182.orientation
          _x = _v184
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v185 = val3.scale
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v186 = val3.color
          _x = _v186
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v187 = val3.lifetime
          _x = _v187
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v179.markers.append(val3)
        _v188 = val1.trajectory
        _v189 = _v188.joint_trajectory
        _v190 = _v189.header
        start = end
        end += 4
        (_v190.seq,) = _get_struct_I().unpack(str[start:end])
        _v191 = _v190.stamp
        _x = _v191
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v190.frame_id = str[start:end].decode('utf-8')
        else:
          _v190.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v189.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.effort = struct.unpack(pattern, str[start:end])
          _v192 = val4.time_from_start
          _x = _v192
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v189.points.append(val4)
        _v193 = _v188.multi_dof_joint_trajectory
        _v194 = _v193.header
        start = end
        end += 4
        (_v194.seq,) = _get_struct_I().unpack(str[start:end])
        _v195 = _v194.stamp
        _x = _v195
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v194.frame_id = str[start:end].decode('utf-8')
        else:
          _v194.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v193.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.transforms = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Transform()
            _v196 = val5.translation
            _x = _v196
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v197 = val5.rotation
            _x = _v197
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.transforms.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.velocities = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v198 = val5.linear
            _x = _v198
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v199 = val5.angular
            _x = _v199
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.velocities.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.accelerations = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v200 = val5.linear
            _x = _v200
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v201 = val5.angular
            _x = _v201
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.accelerations.append(val5)
          _v202 = val4.time_from_start
          _x = _v202
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v193.points.append(val4)
        _v203 = val1.scene_diff
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v203.name = str[start:end].decode('utf-8')
        else:
          _v203.name = str[start:end]
        _v204 = _v203.robot_state
        _v205 = _v204.joint_state
        _v206 = _v205.header
        start = end
        end += 4
        (_v206.seq,) = _get_struct_I().unpack(str[start:end])
        _v207 = _v206.stamp
        _x = _v207
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v206.frame_id = str[start:end].decode('utf-8')
        else:
          _v206.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v205.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8')
          else:
            val5 = str[start:end]
          _v205.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v205.position = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v205.velocity = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v205.effort = struct.unpack(pattern, str[start:end])
        _v208 = _v204.multi_dof_joint_state
        _v209 = _v208.header
        start = end
        end += 4
        (_v209.seq,) = _get_struct_I().unpack(str[start:end])
        _v210 = _v209.stamp
        _x = _v210
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v209.frame_id = str[start:end].decode('utf-8')
        else:
          _v209.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v208.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8')
          else:
            val5 = str[start:end]
          _v208.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v208.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v211 = val5.translation
          _x = _v211
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v212 = val5.rotation
          _x = _v212
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v208.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v208.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v213 = val5.linear
          _x = _v213
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v214 = val5.angular
          _x = _v214
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v208.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v208.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v215 = val5.force
          _x = _v215
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v216 = val5.torque
          _x = _v216
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v208.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v204.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8')
          else:
            val4.link_name = str[start:end]
          _v217 = val4.object
          _v218 = _v217.header
          start = end
          end += 4
          (_v218.seq,) = _get_struct_I().unpack(str[start:end])
          _v219 = _v218.stamp
          _x = _v219
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v218.frame_id = str[start:end].decode('utf-8')
          else:
            _v218.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v217.id = str[start:end].decode('utf-8')
          else:
            _v217.id = str[start:end]
          _v220 = _v217.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v220.key = str[start:end].decode('utf-8')
          else:
            _v220.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v220.db = str[start:end].decode('utf-8')
          else:
            _v220.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.dimensions = struct.unpack(pattern, str[start:end])
            _v217.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v221 = val6.position
            _x = _v221
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v222 = val6.orientation
            _x = _v222
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v217.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v217.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v223 = val6.position
            _x = _v223
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v224 = val6.orientation
            _x = _v224
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v217.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = _get_struct_4d().unpack(str[start:end])
            _v217.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v225 = val6.position
            _x = _v225
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v226 = val6.orientation
            _x = _v226
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v217.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8')
            else:
              val6 = str[start:end]
            _v217.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v217.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v227 = val6.position
            _x = _v227
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v228 = val6.orientation
            _x = _v228
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v217.subframe_poses.append(val6)
          start = end
          end += 1
          (_v217.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v229 = val4.detach_posture
          _v230 = _v229.header
          start = end
          end += 4
          (_v230.seq,) = _get_struct_I().unpack(str[start:end])
          _v231 = _v230.stamp
          _x = _v231
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v230.frame_id = str[start:end].decode('utf-8')
          else:
            _v230.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v229.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8')
            else:
              val6 = str[start:end]
            _v229.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v229.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.effort = struct.unpack(pattern, str[start:end])
            _v232 = val6.time_from_start
            _x = _v232
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v229.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v204.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v204.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v204.is_diff = bool(_v204.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v203.robot_model_name = str[start:end].decode('utf-8')
        else:
          _v203.robot_model_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v203.fixed_frame_transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.TransformStamped()
          _v233 = val3.header
          start = end
          end += 4
          (_v233.seq,) = _get_struct_I().unpack(str[start:end])
          _v234 = _v233.stamp
          _x = _v234
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v233.frame_id = str[start:end].decode('utf-8')
          else:
            _v233.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.child_frame_id = str[start:end].decode('utf-8')
          else:
            val3.child_frame_id = str[start:end]
          _v235 = val3.transform
          _v236 = _v235.translation
          _x = _v236
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v237 = _v235.rotation
          _x = _v237
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v203.fixed_frame_transforms.append(val3)
        _v238 = _v203.allowed_collision_matrix
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v238.entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v238.entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v238.entry_values = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AllowedCollisionEntry()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sB'%length
          start = end
          end += struct.calcsize(pattern)
          val4.enabled = struct.unpack(pattern, str[start:end])
          val4.enabled = list(map(bool, val4.enabled))
          _v238.entry_values.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v238.default_entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v238.default_entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        _v238.default_entry_values = struct.unpack(pattern, str[start:end])
        _v238.default_entry_values = list(map(bool, _v238.default_entry_values))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v203.link_padding = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkPadding()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.padding,) = _get_struct_d().unpack(str[start:end])
          _v203.link_padding.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v203.link_scale = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkScale()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.scale,) = _get_struct_d().unpack(str[start:end])
          _v203.link_scale.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v203.object_colors = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.ObjectColor()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.id = str[start:end].decode('utf-8')
          else:
            val3.id = str[start:end]
          _v239 = val3.color
          _x = _v239
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v203.object_colors.append(val3)
        _v240 = _v203.world
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v240.collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.CollisionObject()
          _v241 = val4.header
          start = end
          end += 4
          (_v241.seq,) = _get_struct_I().unpack(str[start:end])
          _v242 = _v241.stamp
          _x = _v242
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v241.frame_id = str[start:end].decode('utf-8')
          else:
            _v241.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.id = str[start:end].decode('utf-8')
          else:
            val4.id = str[start:end]
          _v243 = val4.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.key = str[start:end].decode('utf-8')
          else:
            _v243.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.db = str[start:end].decode('utf-8')
          else:
            _v243.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitives = []
          for i in range(0, length):
            val5 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val5.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val5.dimensions = struct.unpack(pattern, str[start:end])
            val4.primitives.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitive_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v244 = val5.position
            _x = _v244
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v245 = val5.orientation
            _x = _v245
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.primitive_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.meshes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.triangles = []
            for i in range(0, length):
              val6 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val6.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val5.triangles.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.vertices = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Point()
              _x = val6
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val5.vertices.append(val6)
            val4.meshes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.mesh_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v246 = val5.position
            _x = _v246
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v247 = val5.orientation
            _x = _v247
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.mesh_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.planes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val5.coef = _get_struct_4d().unpack(str[start:end])
            val4.planes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.plane_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v248 = val5.position
            _x = _v248
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v249 = val5.orientation
            _x = _v249
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.plane_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8')
            else:
              val5 = str[start:end]
            val4.subframe_names.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v250 = val5.position
            _x = _v250
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v251 = val5.orientation
            _x = _v251
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.subframe_poses.append(val5)
          start = end
          end += 1
          (val4.operation,) = _get_struct_b().unpack(str[start:end])
          _v240.collision_objects.append(val4)
        _v252 = _v240.octomap
        _v253 = _v252.header
        start = end
        end += 4
        (_v253.seq,) = _get_struct_I().unpack(str[start:end])
        _v254 = _v253.stamp
        _x = _v254
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v253.frame_id = str[start:end].decode('utf-8')
        else:
          _v253.frame_id = str[start:end]
        _v255 = _v252.origin
        _v256 = _v255.position
        _x = _v256
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v257 = _v255.orientation
        _x = _v257
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v258 = _v252.octomap
        _v259 = _v258.header
        start = end
        end += 4
        (_v259.seq,) = _get_struct_I().unpack(str[start:end])
        _v260 = _v259.stamp
        _x = _v260
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v259.frame_id = str[start:end].decode('utf-8')
        else:
          _v259.frame_id = str[start:end]
        start = end
        end += 1
        (_v258.binary,) = _get_struct_B().unpack(str[start:end])
        _v258.binary = bool(_v258.binary)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v258.id = str[start:end].decode('utf-8')
        else:
          _v258.id = str[start:end]
        start = end
        end += 8
        (_v258.resolution,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        _v258.data = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (_v203.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v203.is_diff = bool(_v203.is_diff)
        self.goal.solution.sub_trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.process_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.solution.start_scene.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.robot_state.joint_state.header.seq, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.solution.start_scene.robot_state.joint_state.position.tostring())
      length = len(self.goal.solution.start_scene.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.solution.start_scene.robot_state.joint_state.velocity.tostring())
      length = len(self.goal.solution.start_scene.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.solution.start_scene.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms:
        _v261 = val1.translation
        _x = _v261
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v262 = val1.rotation
        _x = _v262
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist:
        _v263 = val1.linear
        _x = _v263
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v264 = val1.angular
        _x = _v264
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench:
        _v265 = val1.force
        _x = _v265
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v266 = val1.torque
        _x = _v266
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.goal.solution.start_scene.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v267 = val1.object
        _v268 = _v267.header
        buff.write(_get_struct_I().pack(_v268.seq))
        _v269 = _v268.stamp
        _x = _v269
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v268.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v267.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v270 = _v267.type
        _x = _v270.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v270.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v267.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v267.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.primitive_poses:
          _v271 = val3.position
          _x = _v271
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v272 = val3.orientation
          _x = _v272
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v267.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v267.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.mesh_poses:
          _v273 = val3.position
          _x = _v273
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v274 = val3.orientation
          _x = _v274
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v267.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.planes:
          buff.write(val3.coef.tostring())
        length = len(_v267.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.plane_poses:
          _v275 = val3.position
          _x = _v275
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v276 = val3.orientation
          _x = _v276
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v267.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v267.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.subframe_poses:
          _v277 = val3.position
          _x = _v277
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v278 = val3.orientation
          _x = _v278
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v267.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v279 = val1.detach_posture
        _v280 = _v279.header
        buff.write(_get_struct_I().pack(_v280.seq))
        _v281 = _v280.stamp
        _x = _v281
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v280.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v279.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v279.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v279.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v279.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v282 = val3.time_from_start
          _x = _v282
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.robot_state.is_diff))
      _x = self.goal.solution.start_scene.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.solution.start_scene.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.fixed_frame_transforms:
        _v283 = val1.header
        buff.write(_get_struct_I().pack(_v283.seq))
        _v284 = _v283.stamp
        _x = _v284
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v283.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v285 = val1.transform
        _v286 = _v285.translation
        _x = _v286
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v287 = _v285.rotation
        _x = _v287
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.goal.solution.start_scene.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.goal.solution.start_scene.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.goal.solution.start_scene.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v288 = val1.color
        _x = _v288
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.goal.solution.start_scene.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.start_scene.world.collision_objects:
        _v289 = val1.header
        buff.write(_get_struct_I().pack(_v289.seq))
        _v290 = _v289.stamp
        _x = _v290
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v289.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v291 = val1.type
        _x = _v291.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v291.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v292 = val2.position
          _x = _v292
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v293 = val2.orientation
          _x = _v293
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v294 = val2.position
          _x = _v294
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v295 = val2.orientation
          _x = _v295
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v296 = val2.position
          _x = _v296
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v297 = val2.orientation
          _x = _v297
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v298 = val2.position
          _x = _v298
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v299 = val2.orientation
          _x = _v299
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.solution.start_scene.world.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.goal.solution.start_scene.world.octomap.origin.position.x, _x.goal.solution.start_scene.world.octomap.origin.position.y, _x.goal.solution.start_scene.world.octomap.origin.position.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.x, _x.goal.solution.start_scene.world.octomap.origin.orientation.y, _x.goal.solution.start_scene.world.octomap.origin.orientation.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.w, _x.goal.solution.start_scene.world.octomap.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.nsecs))
      _x = self.goal.solution.start_scene.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.world.octomap.octomap.binary))
      _x = self.goal.solution.start_scene.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.goal.solution.start_scene.world.octomap.octomap.resolution))
      length = len(self.goal.solution.start_scene.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.goal.solution.start_scene.world.octomap.octomap.data.tostring())
      buff.write(_get_struct_B().pack(self.goal.solution.start_scene.is_diff))
      length = len(self.goal.solution.sub_solution)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.sub_solution:
        _v300 = val1.info
        _x = _v300
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v300.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(_v300.stage_id))
        length = len(_v300.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v300.markers:
          _v301 = val3.header
          buff.write(_get_struct_I().pack(_v301.seq))
          _v302 = _v301.stamp
          _x = _v302
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v301.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v303 = val3.pose
          _v304 = _v303.position
          _x = _v304
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v305 = _v303.orientation
          _x = _v305
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v306 = val3.scale
          _x = _v306
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v307 = val3.color
          _x = _v307
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v308 = val3.lifetime
          _x = _v308
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_B().pack(val3.frame_locked))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_B().pack(val3.mesh_use_embedded_materials))
        length = len(val1.sub_solution_id)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.sub_solution_id.tostring())
      length = len(self.goal.solution.sub_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.solution.sub_trajectory:
        _v309 = val1.info
        _x = _v309
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v309.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(_v309.stage_id))
        length = len(_v309.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v309.markers:
          _v310 = val3.header
          buff.write(_get_struct_I().pack(_v310.seq))
          _v311 = _v310.stamp
          _x = _v311
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v310.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v312 = val3.pose
          _v313 = _v312.position
          _x = _v313
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v314 = _v312.orientation
          _x = _v314
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v315 = val3.scale
          _x = _v315
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v316 = val3.color
          _x = _v316
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v317 = val3.lifetime
          _x = _v317
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_B().pack(val3.frame_locked))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_B().pack(val3.mesh_use_embedded_materials))
        _v318 = val1.trajectory
        _v319 = _v318.joint_trajectory
        _v320 = _v319.header
        buff.write(_get_struct_I().pack(_v320.seq))
        _v321 = _v320.stamp
        _x = _v321
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v320.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v319.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v319.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v319.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v319.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.positions.tostring())
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.velocities.tostring())
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.accelerations.tostring())
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.effort.tostring())
          _v322 = val4.time_from_start
          _x = _v322
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v323 = _v318.multi_dof_joint_trajectory
        _v324 = _v323.header
        buff.write(_get_struct_I().pack(_v324.seq))
        _v325 = _v324.stamp
        _x = _v325
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v324.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v323.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v323.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v323.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v323.points:
          length = len(val4.transforms)
          buff.write(_struct_I.pack(length))
          for val5 in val4.transforms:
            _v326 = val5.translation
            _x = _v326
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v327 = val5.rotation
            _x = _v327
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          for val5 in val4.velocities:
            _v328 = val5.linear
            _x = _v328
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v329 = val5.angular
            _x = _v329
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          for val5 in val4.accelerations:
            _v330 = val5.linear
            _x = _v330
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v331 = val5.angular
            _x = _v331
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v332 = val4.time_from_start
          _x = _v332
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v333 = val1.scene_diff
        _x = _v333.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v334 = _v333.robot_state
        _v335 = _v334.joint_state
        _v336 = _v335.header
        buff.write(_get_struct_I().pack(_v336.seq))
        _v337 = _v336.stamp
        _x = _v337
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v336.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v335.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v335.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.pack('<I%ss'%length, length, val5))
        length = len(_v335.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v335.position.tostring())
        length = len(_v335.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v335.velocity.tostring())
        length = len(_v335.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v335.effort.tostring())
        _v338 = _v334.multi_dof_joint_state
        _v339 = _v338.header
        buff.write(_get_struct_I().pack(_v339.seq))
        _v340 = _v339.stamp
        _x = _v340
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v339.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v338.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v338.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.pack('<I%ss'%length, length, val5))
        length = len(_v338.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v338.transforms:
          _v341 = val5.translation
          _x = _v341
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v342 = val5.rotation
          _x = _v342
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v338.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v338.twist:
          _v343 = val5.linear
          _x = _v343
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v344 = val5.angular
          _x = _v344
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v338.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v338.wrench:
          _v345 = val5.force
          _x = _v345
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v346 = val5.torque
          _x = _v346
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v334.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v334.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v347 = val4.object
          _v348 = _v347.header
          buff.write(_get_struct_I().pack(_v348.seq))
          _v349 = _v348.stamp
          _x = _v349
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v348.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v347.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v350 = _v347.type
          _x = _v350.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v350.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v347.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.primitives:
            buff.write(_get_struct_B().pack(val6.type))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v347.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.primitive_poses:
            _v351 = val6.position
            _x = _v351
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v352 = val6.orientation
            _x = _v352
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v347.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v347.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.mesh_poses:
            _v353 = val6.position
            _x = _v353
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v354 = val6.orientation
            _x = _v354
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v347.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.planes:
            buff.write(val6.coef.tostring())
          length = len(_v347.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.plane_poses:
            _v355 = val6.position
            _x = _v355
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v356 = val6.orientation
            _x = _v356
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v347.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.pack('<I%ss'%length, length, val6))
          length = len(_v347.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v347.subframe_poses:
            _v357 = val6.position
            _x = _v357
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v358 = val6.orientation
            _x = _v358
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_b().pack(_v347.operation))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.pack('<I%ss'%length, length, val5))
          _v359 = val4.detach_posture
          _v360 = _v359.header
          buff.write(_get_struct_I().pack(_v360.seq))
          _v361 = _v360.stamp
          _x = _v361
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v360.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v359.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v359.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.pack('<I%ss'%length, length, val6))
          length = len(_v359.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v359.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.positions.tostring())
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.velocities.tostring())
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.accelerations.tostring())
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.effort.tostring())
            _v362 = val6.time_from_start
            _x = _v362
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_d().pack(val4.weight))
        buff.write(_get_struct_B().pack(_v334.is_diff))
        _x = _v333.robot_model_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v333.fixed_frame_transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v333.fixed_frame_transforms:
          _v363 = val3.header
          buff.write(_get_struct_I().pack(_v363.seq))
          _v364 = _v363.stamp
          _x = _v364
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v363.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v365 = val3.transform
          _v366 = _v365.translation
          _x = _v366
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v367 = _v365.rotation
          _x = _v367
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v368 = _v333.allowed_collision_matrix
        length = len(_v368.entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v368.entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v368.entry_values)
        buff.write(_struct_I.pack(length))
        for val4 in _v368.entry_values:
          length = len(val4.enabled)
          buff.write(_struct_I.pack(length))
          pattern = '<%sB'%length
          buff.write(val4.enabled.tostring())
        length = len(_v368.default_entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v368.default_entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v368.default_entry_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v368.default_entry_values.tostring())
        length = len(_v333.link_padding)
        buff.write(_struct_I.pack(length))
        for val3 in _v333.link_padding:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val3.padding))
        length = len(_v333.link_scale)
        buff.write(_struct_I.pack(length))
        for val3 in _v333.link_scale:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val3.scale))
        length = len(_v333.object_colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v333.object_colors:
          _x = val3.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v369 = val3.color
          _x = _v369
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v370 = _v333.world
        length = len(_v370.collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v370.collision_objects:
          _v371 = val4.header
          buff.write(_get_struct_I().pack(_v371.seq))
          _v372 = _v371.stamp
          _x = _v372
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v371.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v373 = val4.type
          _x = _v373.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v373.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val4.primitives)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitives:
            buff.write(_get_struct_B().pack(val5.type))
            length = len(val5.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val5.dimensions.tostring())
          length = len(val4.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitive_poses:
            _v374 = val5.position
            _x = _v374
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v375 = val5.orientation
            _x = _v375
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.meshes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.meshes:
            length = len(val5.triangles)
            buff.write(_struct_I.pack(length))
            for val6 in val5.triangles:
              buff.write(val6.vertex_indices.tostring())
            length = len(val5.vertices)
            buff.write(_struct_I.pack(length))
            for val6 in val5.vertices:
              _x = val6
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.mesh_poses:
            _v376 = val5.position
            _x = _v376
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v377 = val5.orientation
            _x = _v377
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.planes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.planes:
            buff.write(val5.coef.tostring())
          length = len(val4.plane_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.plane_poses:
            _v378 = val5.position
            _x = _v378
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v379 = val5.orientation
            _x = _v379
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.subframe_names)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_names:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.pack('<I%ss'%length, length, val5))
          length = len(val4.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_poses:
            _v380 = val5.position
            _x = _v380
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v381 = val5.orientation
            _x = _v381
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_b().pack(val4.operation))
        _v382 = _v370.octomap
        _v383 = _v382.header
        buff.write(_get_struct_I().pack(_v383.seq))
        _v384 = _v383.stamp
        _x = _v384
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v383.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v385 = _v382.origin
        _v386 = _v385.position
        _x = _v386
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v387 = _v385.orientation
        _x = _v387
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v388 = _v382.octomap
        _v389 = _v388.header
        buff.write(_get_struct_I().pack(_v389.seq))
        _v390 = _v389.stamp
        _x = _v390
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v389.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v388.binary))
        _x = _v388.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(_v388.resolution))
        length = len(_v388.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(_v388.data.tostring())
        buff.write(_get_struct_B().pack(_v333.is_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_task_constructor_msgs.msg.ExecuteTaskSolutionGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.process_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.process_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.task_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.name = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.robot_state.joint_state.header.seq, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v391 = val1.translation
        _x = _v391
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v392 = val1.rotation
        _x = _v392
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v393 = val1.linear
        _x = _v393
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v394 = val1.angular
        _x = _v394
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v395 = val1.force
        _x = _v395
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v396 = val1.torque
        _x = _v396
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v397 = val1.object
        _v398 = _v397.header
        start = end
        end += 4
        (_v398.seq,) = _get_struct_I().unpack(str[start:end])
        _v399 = _v398.stamp
        _x = _v399
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v398.frame_id = str[start:end].decode('utf-8')
        else:
          _v398.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v397.id = str[start:end].decode('utf-8')
        else:
          _v397.id = str[start:end]
        _v400 = _v397.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v400.key = str[start:end].decode('utf-8')
        else:
          _v400.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v400.db = str[start:end].decode('utf-8')
        else:
          _v400.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v397.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v401 = val3.position
          _x = _v401
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v402 = val3.orientation
          _x = _v402
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v397.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v397.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v403 = val3.position
          _x = _v403
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v404 = val3.orientation
          _x = _v404
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v397.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v397.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v405 = val3.position
          _x = _v405
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v406 = val3.orientation
          _x = _v406
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v397.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v397.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v397.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v407 = val3.position
          _x = _v407
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v408 = val3.orientation
          _x = _v408
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v397.subframe_poses.append(val3)
        start = end
        end += 1
        (_v397.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v409 = val1.detach_posture
        _v410 = _v409.header
        start = end
        end += 4
        (_v410.seq,) = _get_struct_I().unpack(str[start:end])
        _v411 = _v410.stamp
        _x = _v411
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v410.frame_id = str[start:end].decode('utf-8')
        else:
          _v410.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v409.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v409.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v409.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v412 = val3.time_from_start
          _x = _v412
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v409.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.goal.solution.start_scene.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.robot_state.is_diff = bool(self.goal.solution.start_scene.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v413 = val1.header
        start = end
        end += 4
        (_v413.seq,) = _get_struct_I().unpack(str[start:end])
        _v414 = _v413.stamp
        _x = _v414
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v413.frame_id = str[start:end].decode('utf-8')
        else:
          _v413.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v415 = val1.transform
        _v416 = _v415.translation
        _x = _v416
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v417 = _v415.rotation
        _x = _v417
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.goal.solution.start_scene.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.goal.solution.start_scene.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.solution.start_scene.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values = list(map(bool, self.goal.solution.start_scene.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.goal.solution.start_scene.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v418 = val1.color
        _x = _v418
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.goal.solution.start_scene.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.start_scene.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v419 = val1.header
        start = end
        end += 4
        (_v419.seq,) = _get_struct_I().unpack(str[start:end])
        _v420 = _v419.stamp
        _x = _v420
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v419.frame_id = str[start:end].decode('utf-8')
        else:
          _v419.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v421 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v421.key = str[start:end].decode('utf-8')
        else:
          _v421.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v421.db = str[start:end].decode('utf-8')
        else:
          _v421.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v422 = val2.position
          _x = _v422
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v423 = val2.orientation
          _x = _v423
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v424 = val2.position
          _x = _v424
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v425 = val2.orientation
          _x = _v425
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v426 = val2.position
          _x = _v426
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v427 = val2.orientation
          _x = _v427
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v428 = val2.position
          _x = _v428
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v429 = val2.orientation
          _x = _v429
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.goal.solution.start_scene.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.solution.start_scene.world.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.solution.start_scene.world.octomap.origin.position.x, _x.goal.solution.start_scene.world.octomap.origin.position.y, _x.goal.solution.start_scene.world.octomap.origin.position.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.x, _x.goal.solution.start_scene.world.octomap.origin.orientation.y, _x.goal.solution.start_scene.world.octomap.origin.orientation.z, _x.goal.solution.start_scene.world.octomap.origin.orientation.w, _x.goal.solution.start_scene.world.octomap.octomap.header.seq, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.goal.solution.start_scene.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.goal.solution.start_scene.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.world.octomap.octomap.binary = bool(self.goal.solution.start_scene.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.solution.start_scene.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.goal.solution.start_scene.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.goal.solution.start_scene.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.solution.start_scene.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 1
      (self.goal.solution.start_scene.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.goal.solution.start_scene.is_diff = bool(self.goal.solution.start_scene.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.sub_solution = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubSolution()
        _v430 = val1.info
        _x = _v430
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v430.comment = str[start:end].decode('utf-8')
        else:
          _v430.comment = str[start:end]
        start = end
        end += 4
        (_v430.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v430.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v431 = val3.header
          start = end
          end += 4
          (_v431.seq,) = _get_struct_I().unpack(str[start:end])
          _v432 = _v431.stamp
          _x = _v432
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v431.frame_id = str[start:end].decode('utf-8')
          else:
            _v431.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v433 = val3.pose
          _v434 = _v433.position
          _x = _v434
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v435 = _v433.orientation
          _x = _v435
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v436 = val3.scale
          _x = _v436
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v437 = val3.color
          _x = _v437
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v438 = val3.lifetime
          _x = _v438
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v430.markers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.sub_solution_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.goal.solution.sub_solution.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.solution.sub_trajectory = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubTrajectory()
        _v439 = val1.info
        _x = _v439
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v439.comment = str[start:end].decode('utf-8')
        else:
          _v439.comment = str[start:end]
        start = end
        end += 4
        (_v439.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v439.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v440 = val3.header
          start = end
          end += 4
          (_v440.seq,) = _get_struct_I().unpack(str[start:end])
          _v441 = _v440.stamp
          _x = _v441
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v440.frame_id = str[start:end].decode('utf-8')
          else:
            _v440.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v442 = val3.pose
          _v443 = _v442.position
          _x = _v443
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v444 = _v442.orientation
          _x = _v444
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v445 = val3.scale
          _x = _v445
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v446 = val3.color
          _x = _v446
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v447 = val3.lifetime
          _x = _v447
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v439.markers.append(val3)
        _v448 = val1.trajectory
        _v449 = _v448.joint_trajectory
        _v450 = _v449.header
        start = end
        end += 4
        (_v450.seq,) = _get_struct_I().unpack(str[start:end])
        _v451 = _v450.stamp
        _x = _v451
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v450.frame_id = str[start:end].decode('utf-8')
        else:
          _v450.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v449.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v449.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v449.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v452 = val4.time_from_start
          _x = _v452
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v449.points.append(val4)
        _v453 = _v448.multi_dof_joint_trajectory
        _v454 = _v453.header
        start = end
        end += 4
        (_v454.seq,) = _get_struct_I().unpack(str[start:end])
        _v455 = _v454.stamp
        _x = _v455
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v454.frame_id = str[start:end].decode('utf-8')
        else:
          _v454.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v453.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v453.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v453.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.transforms = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Transform()
            _v456 = val5.translation
            _x = _v456
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v457 = val5.rotation
            _x = _v457
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.transforms.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.velocities = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v458 = val5.linear
            _x = _v458
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v459 = val5.angular
            _x = _v459
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.velocities.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.accelerations = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v460 = val5.linear
            _x = _v460
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v461 = val5.angular
            _x = _v461
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.accelerations.append(val5)
          _v462 = val4.time_from_start
          _x = _v462
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v453.points.append(val4)
        _v463 = val1.scene_diff
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v463.name = str[start:end].decode('utf-8')
        else:
          _v463.name = str[start:end]
        _v464 = _v463.robot_state
        _v465 = _v464.joint_state
        _v466 = _v465.header
        start = end
        end += 4
        (_v466.seq,) = _get_struct_I().unpack(str[start:end])
        _v467 = _v466.stamp
        _x = _v467
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v466.frame_id = str[start:end].decode('utf-8')
        else:
          _v466.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v465.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8')
          else:
            val5 = str[start:end]
          _v465.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v465.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v465.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v465.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v468 = _v464.multi_dof_joint_state
        _v469 = _v468.header
        start = end
        end += 4
        (_v469.seq,) = _get_struct_I().unpack(str[start:end])
        _v470 = _v469.stamp
        _x = _v470
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v469.frame_id = str[start:end].decode('utf-8')
        else:
          _v469.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v468.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8')
          else:
            val5 = str[start:end]
          _v468.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v468.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v471 = val5.translation
          _x = _v471
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v472 = val5.rotation
          _x = _v472
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v468.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v468.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v473 = val5.linear
          _x = _v473
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v474 = val5.angular
          _x = _v474
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v468.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v468.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v475 = val5.force
          _x = _v475
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v476 = val5.torque
          _x = _v476
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v468.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v464.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8')
          else:
            val4.link_name = str[start:end]
          _v477 = val4.object
          _v478 = _v477.header
          start = end
          end += 4
          (_v478.seq,) = _get_struct_I().unpack(str[start:end])
          _v479 = _v478.stamp
          _x = _v479
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v478.frame_id = str[start:end].decode('utf-8')
          else:
            _v478.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v477.id = str[start:end].decode('utf-8')
          else:
            _v477.id = str[start:end]
          _v480 = _v477.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v480.key = str[start:end].decode('utf-8')
          else:
            _v480.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v480.db = str[start:end].decode('utf-8')
          else:
            _v480.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v477.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v481 = val6.position
            _x = _v481
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v482 = val6.orientation
            _x = _v482
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v477.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v477.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v483 = val6.position
            _x = _v483
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v484 = val6.orientation
            _x = _v484
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v477.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v477.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v485 = val6.position
            _x = _v485
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v486 = val6.orientation
            _x = _v486
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v477.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8')
            else:
              val6 = str[start:end]
            _v477.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v477.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v487 = val6.position
            _x = _v487
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v488 = val6.orientation
            _x = _v488
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v477.subframe_poses.append(val6)
          start = end
          end += 1
          (_v477.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v489 = val4.detach_posture
          _v490 = _v489.header
          start = end
          end += 4
          (_v490.seq,) = _get_struct_I().unpack(str[start:end])
          _v491 = _v490.stamp
          _x = _v491
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v490.frame_id = str[start:end].decode('utf-8')
          else:
            _v490.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v489.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8')
            else:
              val6 = str[start:end]
            _v489.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v489.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val6.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v492 = val6.time_from_start
            _x = _v492
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v489.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v464.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v464.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v464.is_diff = bool(_v464.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v463.robot_model_name = str[start:end].decode('utf-8')
        else:
          _v463.robot_model_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.fixed_frame_transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.TransformStamped()
          _v493 = val3.header
          start = end
          end += 4
          (_v493.seq,) = _get_struct_I().unpack(str[start:end])
          _v494 = _v493.stamp
          _x = _v494
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v493.frame_id = str[start:end].decode('utf-8')
          else:
            _v493.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.child_frame_id = str[start:end].decode('utf-8')
          else:
            val3.child_frame_id = str[start:end]
          _v495 = val3.transform
          _v496 = _v495.translation
          _x = _v496
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v497 = _v495.rotation
          _x = _v497
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v463.fixed_frame_transforms.append(val3)
        _v498 = _v463.allowed_collision_matrix
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v498.entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v498.entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v498.entry_values = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AllowedCollisionEntry()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sB'%length
          start = end
          end += struct.calcsize(pattern)
          val4.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
          val4.enabled = list(map(bool, val4.enabled))
          _v498.entry_values.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v498.default_entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v498.default_entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        _v498.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v498.default_entry_values = list(map(bool, _v498.default_entry_values))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.link_padding = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkPadding()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.padding,) = _get_struct_d().unpack(str[start:end])
          _v463.link_padding.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.link_scale = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkScale()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.scale,) = _get_struct_d().unpack(str[start:end])
          _v463.link_scale.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.object_colors = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.ObjectColor()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.id = str[start:end].decode('utf-8')
          else:
            val3.id = str[start:end]
          _v499 = val3.color
          _x = _v499
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v463.object_colors.append(val3)
        _v500 = _v463.world
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v500.collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.CollisionObject()
          _v501 = val4.header
          start = end
          end += 4
          (_v501.seq,) = _get_struct_I().unpack(str[start:end])
          _v502 = _v501.stamp
          _x = _v502
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v501.frame_id = str[start:end].decode('utf-8')
          else:
            _v501.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.id = str[start:end].decode('utf-8')
          else:
            val4.id = str[start:end]
          _v503 = val4.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v503.key = str[start:end].decode('utf-8')
          else:
            _v503.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v503.db = str[start:end].decode('utf-8')
          else:
            _v503.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitives = []
          for i in range(0, length):
            val5 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val5.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val5.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            val4.primitives.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitive_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v504 = val5.position
            _x = _v504
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v505 = val5.orientation
            _x = _v505
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.primitive_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.meshes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.triangles = []
            for i in range(0, length):
              val6 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val6.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val5.triangles.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.vertices = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Point()
              _x = val6
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val5.vertices.append(val6)
            val4.meshes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.mesh_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v506 = val5.position
            _x = _v506
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v507 = val5.orientation
            _x = _v507
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.mesh_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.planes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val5.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            val4.planes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.plane_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v508 = val5.position
            _x = _v508
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v509 = val5.orientation
            _x = _v509
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.plane_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8')
            else:
              val5 = str[start:end]
            val4.subframe_names.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v510 = val5.position
            _x = _v510
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v511 = val5.orientation
            _x = _v511
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.subframe_poses.append(val5)
          start = end
          end += 1
          (val4.operation,) = _get_struct_b().unpack(str[start:end])
          _v500.collision_objects.append(val4)
        _v512 = _v500.octomap
        _v513 = _v512.header
        start = end
        end += 4
        (_v513.seq,) = _get_struct_I().unpack(str[start:end])
        _v514 = _v513.stamp
        _x = _v514
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v513.frame_id = str[start:end].decode('utf-8')
        else:
          _v513.frame_id = str[start:end]
        _v515 = _v512.origin
        _v516 = _v515.position
        _x = _v516
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v517 = _v515.orientation
        _x = _v517
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v518 = _v512.octomap
        _v519 = _v518.header
        start = end
        end += 4
        (_v519.seq,) = _get_struct_I().unpack(str[start:end])
        _v520 = _v519.stamp
        _x = _v520
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v519.frame_id = str[start:end].decode('utf-8')
        else:
          _v519.frame_id = str[start:end]
        start = end
        end += 1
        (_v518.binary,) = _get_struct_B().unpack(str[start:end])
        _v518.binary = bool(_v518.binary)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v518.id = str[start:end].decode('utf-8')
        else:
          _v518.id = str[start:end]
        start = end
        end += 8
        (_v518.resolution,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        _v518.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
        start = end
        end += 1
        (_v463.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v463.is_diff = bool(_v463.is_diff)
        self.goal.solution.sub_trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
